require 'spec_helper'
require 'ronin/post_exploitation'

describe PostExploitation do
  let(:leverage_class) do
    Class.new do
      include Ronin::PostExploitation

      leverage :shell
    end
  end

  context "class-leval" do
    subject { leverage_class }

    it "should have leveraged resources" do
      subject.leverages.should include(:shell)
    end

    it "should determine which resources were leveraged" do
      subject.should be_leverages(:shell)
    end
  end

  context "instance-level" do
    subject do
      obj = leverage_class.new
      obj.instance_eval { leverage :fs }
      obj
    end

    it "should inherit the resources leveraged by the class" do
      class_leverages = subject.class.leverages

      (subject.leverages & class_leverages).should == class_leverages
    end

    it "should determine which resources were leveraged" do
      subject.should be_leverages(:fs)
    end

    it "should lazily initialize leveraged resources objects" do
      subject.leveraged_resources.should be_empty
      subject.leveraged_resources[:shell].should_not be_nil
    end

    it "should not provide access to other resources" do
      subject.leveraged_resources[:net].should be_nil
    end

    it "should define methods for accessing the resources" do
      subject.should respond_to(:fs)
    end

    it "should raise an exception for unknown resources" do
      subject.instance_eval { leverage :fail }

      lambda {
        subject.fail
      }.should raise_error(PostExploitation::UnknownResource)
    end
  end
end
