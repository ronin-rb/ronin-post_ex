#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

module Ronin
  module PostExploitation
    module Resources
      #
      # Controls dynamic code.
      #
      class Code < Resource

        # The type of code
        attr_reader :type

        #
        # Initializes the Code resource.
        #
        # @param [Object] controller
        #   The object controlling the code.
        #
        # @param [Symbol] type
        #   The type of code.
        #
        def initialize(controller,type)
          super(controller)

          @type = type
        end

        #
        # Evaluates some code.
        #
        # @param [String] code
        #   The code to be evaluated.
        #
        # @return [Object]
        #   The return value of the code.
        #
        def eval(code)
          @controller.send("#{@type}_eval",code)
        end

        #
        # Defines a new method.
        #
        # @param [String, Symbol] name
        #   The name of the new method.
        #
        # @param [Array<Symbol, String>] args
        #   The names of the arguments for the enw method.
        #
        # @param [String] code
        #   The body for the new method.
        #
        def define(name,args,body)
          name = name.to_s
          args = args.map(&:to_s)

          return @controller.send("#{@type}_define",name,args,body)
        end

        protected

        #
        # Pass all additional method calls to the `*_call` method
        # for the code type.
        #
        # @param [Symbol] name
        #   The name of the missing method.
        #
        # @param [Array] arguments
        #   Arguments being passed with the method call.
        #
        def method_missing(name,*arguments)
          @controller.send("#{@type}_call",name,*arguments)
        end

      end
    end
  end
end
