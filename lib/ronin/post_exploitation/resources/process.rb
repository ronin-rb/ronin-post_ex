#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/post_exploitation/resource'

require 'set'

module Ronin
  module PostExploitation
    module Resources
      #
      # Leverages the Process resource.
      #
      # @since 1.0.0
      #
      class Process < Resource

        METHODS = Set[
          :process_getpid,
          :process_getppid,
          :process_getuid,
          :process_setuid,
          :process_geteuid,
          :process_seteuid,
          :process_getgid,
          :process_setgid,
          :process_getegid,
          :process_setegid,
          :process_getsid,
          :process_setsid,
          :process_getenv,
          :process_setenv,
          :process_unsetenv,
          :process_kill,
          :process_getcwd,
          :process_chdir,
          :process_time,
          :process_spawn,
          :process_exit
        ]

        #
        # Determines whether an object is compatible with {Process}.
        #
        # @param [Object] object
        #   The object in question.
        #
        # @return [Boolean]
        #   Specifies whether the object is compatible with {Process}.
        #
        def self.compatible?(object)
          METHODS.any? { |name| object.respond_to?(name) }
        end

        #
        # Gets the pid of the current process.
        #
        # @return [Integer]
        #   The current PID.
        #
        # @note
        #   Requires the `process_getpid` method be defined by the leveraging
        #   object.
        #
        def pid
          requires_method! :process_getpid

          @leverage.process_getpid
        end

        #
        # Gets the pid of the parent process.
        #
        # @return [Integer]
        #   The parent PID.
        #
        # @note
        #   Requires the `process_getppid` method be defined by the leveraging
        #   object.
        #
        def ppid
          requires_method! :process_getppid

          @leverage.process_getppid
        end

        #
        # Gets the UID that the current process is running under.
        #
        # @return [Integer]
        #   The current UID.
        #
        # @note
        #   Requires the `process_getuid` method be defined by the leveraging
        #   object.
        #
        def uid
          requires_method! :process_getuid

          @leverage.process_getuid
        end

        #
        # Attempts to set the UID of the current process.
        #
        # @param [Integer] new_uid
        #   The new UID.
        #
        # @note
        #   Requires the `process_setuid` method be defined by the leveraging
        #   object.
        #
        def uid=(new_uid)
          requires_method! :process_setuid

          @leverage.process_setuid(new_uid)
        end

        #
        # Gets the effective UID that the current process is running under.
        #
        # @return [Integer]
        #   The effective UID.
        #
        # @note
        #   Requires the `process_geteuid` method be defined by the leveraging
        #   object.
        #
        def euid
          requires_method! :process_geteuid

          @leverage.process_geteuid
        end

        #
        # Attempts to set the effective UID of the current process.
        #
        # @param [Integer] new_euid
        #   The new effective UID.
        #
        # @note
        #   Requires the `process_seteuid` method be defined by the leveraging
        #   object.
        #
        def euid=(new_euid)
          requires_method! :process_seteuid

          @leverage.process_seteuid(new_euid)
        end

        #
        # Gets the GID that the current process is running under.
        #
        # @return [Integer]
        #   The current GID.
        #
        # @note
        #   Requires the `process_getgid` method be defined by the leveraging
        #   object.
        #
        def gid
          requires_method! :process_getgid

          @leverage.process_getgid
        end

        #
        # Attempts to set the GID of the current process.
        #
        # @param [Integer] new_gid
        #   The new GID.
        #
        # @note
        #   Requires the `process_setgid` method be defined by the leveraging
        #   object.
        #
        def gid=(gid)
          requires_method! :process_setgid

          @leverage.process_setgid(new_gid)
        end

        #
        # Gets the effective GID that the current process is running under.
        #
        # @return [Integer]
        #   The effective GID.
        #
        # @note
        #   Requires the `process_getegid` method be defined by the leveraging
        #   object.
        #
        def egid
          requires_method! :process_getegid

          @leverage.process_getegid
        end

        #
        # Attempts to set the effective GID of the current process.
        #
        # @param [Integer] new_egid
        #   The new effective GID.
        #
        # @note
        #   Requires the `process_setegid` method be defined by the leveraging
        #   object.
        #
        def egid=(new_egid)
          requires_method! :process_setegid

          @leverage.process_setegid(new_egid)
        end

        #
        # Gets the SID of the current process.
        #
        # @return [Integer]
        #   The current SID.
        #
        # @note
        #   Requires the `process_getsid` method be defined by the leveraging
        #   object.
        #
        def sid
          requires_method! :process_getsid

          @leverage.process_getsid
        end

        #
        # Sets the SID of the current process.
        #
        # @note
        #   Requires the `process_setsid` method be defined by the leveraging
        #   object.
        #
        def setsid
          requires_method! :process_setsid

          @leverage.process_setsid
        end

        #
        # Retrieves the value of a environment variable.
        #
        # @param [String] name
        #   The name of the environment variable.
        #
        # @return [String, nil]
        #   The value of the environment variable.
        #
        # @note
        #   Requires the `process_getenv` method be defined by the leveraging
        #   object.
        #
        # @api public
        #
        def getenv(name)
          requires_method! :process_getenv

          @leverage.process_getenv(name)
        end

        #
        # Sets the value of a environment variable.
        #
        # @param [String] name
        #   The name of the environment variable.
        #
        # @param [String] value
        #   The new value for the environment variable.
        #
        # @note
        #   Requires the `process_setenv` method be defined by the leveraging
        #   object.
        #
        # @api public
        #
        def setenv(name,value)
          requires_method! :process_setenv

          @leverage.process_setenv(name,value)
        end

        #
        # Unsets an environment variable.
        #
        # @param [String] name
        #   The name of the environment variable.
        #
        # @note
        #   Requires the `process_unsetenv` method be defined by the leveraging
        #   object.
        #
        # @api public
        #
        def unsetenv(name)
          requires_method! :process_unsetenv

          @leverage.process_unsetenv(name)
        end

        #
        # Kills a process.
        #
        # @param [Integer] pid
        #   The PID of the process to kill.
        #
        # @param [String] signal
        #   The POSIX signal name to send to the process.
        #
        # @note
        #   Requires the `process_kill` method be defined by the leveraging
        #   object.
        #
        def kill(pid,signal='KILL')
          requires_method! :process_kill

          @leverage.process_kill(pid,signal)
        end

        #
        # Gets the working directory of the current process.
        #
        # @return [String]
        #   The current working directory.
        #
        # @note
        #   Requires the `process_getcwd` method be defined by the leveraging
        #   object.
        #
        def getcwd
          requires_method! :process_getcwd

          @leverage.process_getcwd
        end

        #
        # Changes the working directory of the current process.
        #
        # @param [String] path
        #   The new working directory.
        #
        # @return [String]
        #   The new current working directory.
        #
        # @note
        #   Requires the `process_chdir` method be defined by the leveraging
        #   object.
        #
        def chdir(path)
          requires_method! :process_chdir

          @leverage.process_chdir(path)
        end

        #
        # Gets the current time.
        #
        # @return [Time]
        #   The current time.
        #
        # @note
        #   Requires the `process_time` method be defined by the leveraging
        #   object.
        #
        def time
          requires_method! :process_time

          @leverage.process_time
        end

        #
        # Executes a program as a separate child process.
        #
        # @param [String] program
        #   The name or path of the program.
        #
        # @param [Array<String>] arguments
        #   Additional arguments to execute the program with.
        #
        # @return [Integer]
        #   The pid of the new process.
        #
        # @note
        #   Requires the `process_spawn` method be defined by the leveraging
        #   object.
        #
        # @api public
        #
        def spawn(program,*arguments)
          requires_method! :process_spawn

          @leverage.process_spawn(program,*arguments)
        end

        #
        # Exits the current running process.
        #
        # @note
        #   Requires the `process_exit` method be defined by the leveraging
        #   object.
        #
        def exit
          requires_method! :process_exit

          @leverage.process_exit
        end

      end
    end
  end
end
