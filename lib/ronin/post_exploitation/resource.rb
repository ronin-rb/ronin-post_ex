#
# Ronin Exploits - A Ruby library for Ronin that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2011 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This file is part of Ronin Exploits.
#
# Ronin is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ronin is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ronin.  If not, see <http://www.gnu.org/licenses/>
#

require 'ronin/ui/output/helpers'

module Ronin
  module PostExploitation
    #
    # A base-class for all leveraged Resources.
    #
    # @since 1.0.0
    #
    class Resource

      include UI::Output::Helpers

      # The object providing control of the Resource
      attr_reader :controller

      #
      # Creates a new Resource.
      #
      # @param [Object] parent 
      #   The object controlling the Resource.
      #
      def initialize(controller)
        @controller = controller
      end

      #
      # Determines whether an object is compatible with the Resource.
      #
      # @param [Object] object
      #   The object in question.
      #
      # @return [Boolean]
      #   Specifies whether the object is compatible with the Resource.
      #
      def self.compatible?(object)
        true
      end

      #
      # Allows resources to spawn interactive consoles.
      #
      # @raise [NotImplementedError]
      #   The console method is not implemented by default.
      #
      def console
        raise(NotImplementedError,"#{self.class} does not provide a console")
      end

      protected

      #
      # Requires that the leveraging object define the given method.
      #
      # @param [Symbol] name
      #   The name of the method that is required.
      #
      # @return [true]
      #   The method is defined.
      #
      # @raise [NotImplementedError]
      #   The method is not defined by the leveraging object.
      #
      def requires_method!(name)
        unless @controller.respond_to?(name)
          raise(NotImplementedError,"#{@controller.inspect} does not define #{name}")
        end

        return true
      end

    end
  end
end
